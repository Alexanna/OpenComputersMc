---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by alexa.
--- DateTime: 14/04/2025 17:06
---

local version = "0.1"

local term = require("term")
local colors = require("colors")

local skylight = {}

local gpu = term.gpu();

local maxDepth = gpu.maxDepth();
local maxWidth, maxHeight = gpu.maxResolution();


local type = {
    label = 0,
    button = 1,
    bar = 2,
    dynamicText = 3,
    textBox = 4,
}

local positionArray = {}
local itemArray = {}

local prevFg = 0
local prevBg = 0

local posX = 1
local posY = 1

local curid = 1

local colorIndexToRBG = {
    [colors.white] = 0xe4e4e4 ,
    [colors.orange] = 0xea7e35,
    [colors.magenta] = 0xbe49c9,
    [colors.lightblue] = 0x6387d2,
    [colors.yellow] = 0xc2b51c,
    [colors.lime] = 0x39ba2e,
    [colors.pink] = 0xd98199,
    [colors.gray] = 0x414141,
    [colors.silver] = 0xa0a7a7,
    [colors.cyan] = 0x267191,
    [colors.purple] = 0x7e34bf,
    [colors.blue] = 0x253193,
    [colors.brown] = 0x56331c,
    [colors.green] = 0x364b18,
    [colors.red] = 0x9e2b27,
    [colors.black] = 0x181414
}

function skylight.CreateEntry(text, lambda, horizontal, itemType)
    if horizontal then
        posX = posX + 1
    else
        posY = posY + 1
        posX = 1
        positionArray[posX] = {}
    end

    positionArray[posY][posX] = curid
    itemArray[curid] = { displayText = text, type = itemType, x = posX, y = posY, lambda = lambda}
    curid = curid + 1
end

function skylight.CreateLabel(text, horizontal)
    skylight.CreateEntry(text, horizontal, nil, type.label)
end

function skylight.CreateButton(text, lambda, horizontal)
    skylight.CreateEntry(text, horizontal, lambda, type.button)
end

function skylight.CreateProgressBar(text, lambda, horizontal)
    skylight.CreateEntry(text, horizontal, lambda, type.bar)
end

function skylight.CreateDynamicText(text, lambda, horizontal)
    skylight.CreateEntry(text, horizontal, lambda, type.dynamicText)
end

function skylight.CreateNumber(text, lambda, horizontal)
    skylight.CreateEntry(text, horizontal, lambda, type.dynamicText)
end

function skylight.CreateTextBox(text, lambda, horizontal)
    skylight.CreateEntry(text, horizontal, lambda, type.textBox)
end


function skylight.New(newProgramName)
    posX = 1
    posY = 1
    curid = 1
    positionArray = {}
    itemArray = {}
    term.clear()
    term.write("SkyLight V" .. version .. " " .. newProgramName)
end

function skylight.Draw()
    for y, d1 in pairs(positionArray) do
        for x, id in pairs(d1) do
            local width = math.floor((maxWidth - 2) * ((1.0) / #d1))
            local text = data.displayText;

            term.setCursor(width * (x-1) + 2, y)
            
            data = itemArray[id]
            
            if data.type == type.label then
            elseif data.type == type.button then
                text = "[" .. text .. "]"
            elseif data.type == type.bar then
                text = text .. "{"
                
                local len = math.max(width - string.len(text) - 1, 4)
                
                local progress = data.lambda()
                for i = 1, len do
                    if (i / len) < progress then
                        text = text .. "■"
                    else
                        text = text .. " "
                    end
                end
                text = text .. "}"
            elseif data.type == type.dynamicText then
                text = text .. data.lambda
            elseif data.type == type.textBox then
                text = text .. "<"
                local len = math.max(width - string.len(text) - 1, 4)

                for i = 1, len do
                    text = text .. " "
                end
                text = text .. ">"
            end

            if string.len(text) > width then
                text = string.sub(width)
            end
            
            term.write(text, false)
        end
    end
end


function skylight.Log(program, info)
    term.setCursor(1, maxHeight - 1)
    term.clearLine()
    term.write("i " .. program.. ": " .. info, false)
end






function skylight.SetColor(colorFgIndex, colorBgIndex)
    if term.gpu().getDepth() == 1 then
        if colorFgIndex == colors.white then
            prevFg = term.gpu().setForeground(1)
        else
            prevFg = term.gpu().setForeground(0)
        end
        if colorBgIndex == colors.white then
            prevBg = term.gpu().setBackground(1)
        else
            prevBg = term.gpu().setBackground(0)
        end
    else
        prevFg = term.gpu().setForeground(colorIndexToRBG[colorFgIndex])
        prevBg = term.gpu().setBackground(colorIndexToRBG[colorBgIndex])
    end
end

function skylight.SetColorRGB(colorFg, colorBg)
    if term.gpu().getDepth() == 1 then
        if colorFg == 0xFFFFFF then
            prevFg = term.gpu().setForeground(1)
        else
            prevFg = term.gpu().setForeground(0)
        end
        if colorBg == 0xFFFFFF then
            prevBg = term.gpu().setBackground(1)
        else
            prevBg = term.gpu().setBackground(0)
        end
    else
        prevFg = term.gpu().setForeground(colorFg)
        prevBg = term.gpu().setBackground(colorBg)
    end
end

function skylight.ResetColor()
    prevFg = term.gpu().setForeground(prevFg)
    prevBg = term.gpu().setBackground(prevBg)
end

function skylight.Clear()
    return term.clear()
end

function skylight.GetWidth()
    return width
end

function skylight.GetHeight()
    return height
end

function skylight.Write(name, data, clamp)
    if clamp == nil then
        clamp = true
    end

    local pos = nameToPos[name]
    if pos == nil then
        pos = count
        nameToPos[name] = pos
        count = count + 1
    end
    term.setCursor(1,pos)
    term.clearLine()

    local output = tostring(data)
    if clamp and #output >= skylight.GetWidth() then
        output = output:sub(1, skylight.GetWidth()-2)
        output = output .. ".."
    end
    term.write(output)
end

function skylight.Read(data, default, offset)
    if offset == nil then
        offset = 0
    end

    if data then
        term.setCursor(1, height - offset)
        term.clearLine()
        if default ~= nil then
            term.write(data.." [" .. tostring(default) .. "]: ")
        else
            term.write(data..": ")
        end
    end

    local input = term.read()

    if input == nil or #input <= 0 or input == "\r" or input == "\n" or input == "\r\n" then
        return default
    end

    input = string.sub(input,1, -2)

    local num = tonumber(input)
    if num ~= nil then
        return num
    end

    if input == "true" then
        return true
    end
    if input == "false" then
        return false
    end

    return input
end

function skylight.Print(data, offset, clamp)
    if offset == nil then
        offset = 0
    end
    if clamp == nil then
        clamp = true
    end

    term.setCursor(1, height - offset)
    term.clearLine()

    local output = tostring(data)
    if clamp and #output >= skylight.GetWidth() then
        output = output:sub(1, skylight.GetWidth()-2)
        output = output .. ".."
    end
    term.write(output)
end

function skylight.PrintLn(data, offset)
    skylight.Print(tostring(data) .. "\r\n", offset)
end

function skylight.GetPercentageText(currentValue, maxValue)
    local progress = (currentValue/maxValue)
    local percent = math.ceil(progress*100)

    return skylight.GetSpacingForNumber(percent,3) .. percent
end

function skylight.GetSpacingForNumber(value, digits)
    local output = ""

    for i = 0, digits do
        if value < (10 ^ i) then
        end
    end


    return output
end

function skylight.ProgressBar(name, frontText, endText, currentValue, maxValue, limitPercent, maxWidthPercent)
    return skylight.ProgressBarDecimal(name, frontText, endText, currentValue/maxValue, limitPercent/100.0, maxWidthPercent /100.0)
end

function skylight.ProgressBarDecimal(name, frontText, endText, progressDecimal, limitDecimal, maxWidthDecimal)
    if limitDecimal == nil then
        limitDecimal = 0
    end

    local outputText = frontText

    local maxWidth = math.ceil(skylight.GetWidth() * maxWidthDecimal) - #frontText - #endText
    local progressWidth = math.ceil(maxWidth * progressDecimal)
    local stopMarker = math.ceil(maxWidth * limitDecimal)

    for i = 1, maxWidth  do
        if i <= progressWidth then
            if i == stopMarker then
                outputText = outputText .. "#"
            else
                outputText = outputText .. "■"
            end
        else
            if i == stopMarker then
                outputText = outputText .. "|"
            else
                outputText = outputText .. " "
            end
        end
    end

    outputText = outputText .. endText

    skylight.Write(name, outputText, false)

    return progressDecimal >= limitDecimal
end

return skylight